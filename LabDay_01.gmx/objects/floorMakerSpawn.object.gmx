<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>floorMakerSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// direction
dir=1;

// generation speed
room_speed=24;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check if tile is already there
if(!place_meeting(x,y,objFloor)){
    
    //generate small room(2x2)
    if(irandom(100)&lt;30){
        switch(dir)
        {
            // if moving right
            case 1:
                // default checks
                check1=0;check2=0;check3=0;
                // check floor placement locations
                if(x+32&gt;room_width-64||place_meeting(x+32,y,objFloor)){check1=1;};
                if(x+32&gt;room_width-64&amp;&amp;y-32&lt;32){check2=1;};
                if(place_meeting(x+32,y-32,objFloor)){check2=1;};
                if(y-32&lt;32||place_meeting(x,y-32,objFloor)){check3=1;};
                
                instance_create(x,y,objFloor);global.floorTiles++;
                if(check1==0){instance_create(x+32,y,objFloor);global.floorTiles++;};
                if(check2==0){instance_create(x+32,y-32,objFloor);global.floorTiles++;};
                if(check3==0){instance_create(x,y-32,objFloor);global.floorTiles++;};
                break;
            
            // if moving down
            case 2:
                // default checks
                check1=0;check2=0;check3=0;
                // check floor placement locations
                if(y+32&gt;room_height-64||place_meeting(x,y+32,objFloor)){check1=1;};
                if(y+32&gt;room_height-64&amp;&amp;x+32&gt;room_width-64){check2=1;};
                if(place_meeting(x+32,y+32,objFloor)){check2=1;};
                if(x+32&lt;room_width-64||place_meeting(x+32,y,objFloor)){check3=1;};
                
                instance_create(x,y,objFloor);global.floorTiles++;
                if(check1==0){instance_create(x,y+32,objFloor);global.floorTiles++;};
                if(check2==0){instance_create(x+32,y+32,objFloor);global.floorTiles++;};
                if(check3==0){instance_create(x+32,y,objFloor);global.floorTiles++;};
                break;
                
             // if moving left
            case 3:
                // default checks
                check1=0;check2=0;check3=0;
                // check floor placement locations
                if(x-32&lt;32||place_meeting(x-32,y,objFloor)){check1=1;};
                if(x-32&lt;32&amp;&amp;y+32&gt;room_height-64){check2=1;};
                if(place_meeting(x-32,y+32,objFloor)){check2=1;};
                if(y+32&gt;room_height-64||place_meeting(x,y+32,objFloor)){check3=1;};
                
                instance_create(x,y,objFloor);global.floorTiles++;
                if(check1==0){instance_create(x,y+32,objFloor);global.floorTiles++;};
                if(check2==0){instance_create(x+32,y+32,objFloor);global.floorTiles++;};
                if(check3==0){instance_create(x+32,y,objFloor);global.floorTiles++;};
                break;
                
            // if moving up
            case 4:
                // default checks
                check1=0;check2=0;check3=0;
                // check floor placement locations
                if(y-32&lt;32||place_meeting(x,y-32,objFloor)){check1=1;};
                if(x-32&lt;32&amp;&amp;y-32&lt;32){check2=1;};
                if(place_meeting(x-32,y-32,objFloor)){check2=1;};
                if(x-32&lt;32||place_meeting(x-32,y,objFloor)){check3=1;};
                
                instance_create(x,y,objFloor);global.floorTiles++;
                if(check1==0){instance_create(x,y-32,objFloor);global.floorTiles++;};
                if(check2==0){instance_create(x-32,y-32,objFloor);global.floorTiles++;};
                if(check3==0){instance_create(x-32,y,objFloor);global.floorTiles++;};
                break;
        }
    }else if(x&gt;32||x&lt;room_width-64||y&gt;32||y&lt;room_height-64){
       // place floor tile
       instance_create(x,y,objFloor);
       // count floor tile
       global.floorTiles++;
    }
}

// remove maker if max floors is reached
if(global.floorTiles&gt;=110){
    instance_create(x,y,objChest01);
    instance_destroy();
}

if(irandom(100)&lt;2){instance_create(x,y,floorMakerSpawn);}

// pick a direction
switch(irandom(6))
{
    case 1:
        dir=1;
        break;
    case 2:
        dir=2;
        break;
    case 3:
        dir=3;
        break;
    case 4:
        dir=4;
        break;
    dir=dir;
}

// dir=choose(1,2,3,4,dir,dir,dir,dir);
// move
switch(dir)
{
    case 1:
        x+=32; // right
        break;
    case 2:
        y+=32; // down
        break;
    case 3:
        x-=32; // left
        break;
    case 4:
        y-=32; // up
        break;
}
// check within room
if(x&lt;32){x=32;}
if(x&gt;room_width-96){x=room_width-96;}
if(y&lt;32){y=32;}
if(y&gt;room_height-96){y=room_height-96;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
