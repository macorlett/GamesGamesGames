<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>EnemySprite01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chaseDistance=64;
isMoving=false;
moveSpeed=2;
tick=0;
wait=false;
waitTime=1;
maxWait=2;
minWalkDistance=32;
maxWalkDistance=96;
walkAngleOffset=64;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// tick timer
if(wait){
    tick+=delta_time;
    if(tick&gt;=waitTime*1000000){
        tick=0;
        wait=false;
    }
}

// idle movement
if(!isMoving&amp;&amp;!wait){
    move=irandom(4);

switch(move){
    case 0: // stay
        waitTime=random(maxWait);
        wait=true;
        break;
    
    case 1: // move left
        xDes=x+irandom_range(minWalkDistance,maxWalkDistance);
        yDes=y+irandom_range(-walkAngleOffset,walkAngleOffset);
        dest=instance_nearest(xDes,yDes,objGrassTile);
        isMoving=true;
        break;
    
    case 2: // move right
        xDes=x+irandom_range(-maxWalkDistance,-minWalkDistance);
        yDes=y+irandom_range(-walkAngleOffset,walkAngleOffset);
        dest=instance_nearest(xDes,yDes,objGrassTile);
        isMoving=true;
        break;
    
    case 3: // move up
        xDes=x+irandom_range(-walkAngleOffset,walkAngleOffset);
        yDes=y+irandom_range(-maxWalkDistance,-minWalkDistance);
        dest=instance_nearest(xDes,yDes,objGrassTile);
        isMoving=true;
        break;
    
    case 4: // move down
        xDes=x+irandom_range(-walkAngleOffset,walkAngleOffset);
        yDes=y+irandom_range(minWalkDistance,maxWalkDistance);
        dest=instance_nearest(xDes,yDes,objGrassTile);
        isMoving=true;
        break;
    
    case 5: // chase player
        break;
    
    case 6: //run from player
        break;
}

}

if(isMoving){
    if(!collision_line(x,y,dest.x+irandom_range(8,24),dest.y+irandom_range(8,24),objWallTile,false,false)){
        if(mp_potential_step(dest.x+16,dest.y+16,moveSpeed,false)){
            isMoving=false;
            waitTime=random(maxWait);
            wait=true;
        }
    }else{
        isMoving=false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
